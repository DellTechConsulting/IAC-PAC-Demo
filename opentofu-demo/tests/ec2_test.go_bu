package tests

import (
	"testing"
	"github.com/gruntwork-io/terratest/modules/terraform"
	"github.com/stretchr/testify/assert"
)

func TestEC2(t *testing.T) {
	t.Parallel()

	vpcOpts := &terraform.Options{
		TerraformDir: "../modules/vpc",
		Vars: map[string]interface{}{
			"name":     "test-vpc",
			"vpc_cidr": "10.0.0.0/16",
		},
	}
	defer terraform.Destroy(t, vpcOpts)
	terraform.InitAndApply(t, vpcOpts)
	vpcID := terraform.Output(t, vpcOpts, "vpc_id")

	subnetOpts := &terraform.Options{
		TerraformDir: "../modules/subnet",
		Vars: map[string]interface{}{
			"name":               "test-subnet",
			"vpc_id":             vpcID,
			"public_subnet_cidr": "10.0.1.0/24",
			"az":                 "ap-south-1a",
		},
	}
	defer terraform.Destroy(t, subnetOpts)
	terraform.InitAndApply(t, subnetOpts)
	subnetID := terraform.Output(t, subnetOpts, "subnet_id")

	sgOpts := &terraform.Options{
		TerraformDir: "../modules/security-group",
		Vars: map[string]interface{}{
			"name":       "test-sg",
			"vpc_id":     vpcID,
			"my_ip_cidr": "0.0.0.0/0",
		},
	}
	defer terraform.Destroy(t, sgOpts)
	terraform.InitAndApply(t, sgOpts)
	sgID := terraform.Output(t, sgOpts, "sg_id")

	ec2Opts := &terraform.Options{
		TerraformDir: "../modules/ec2",
		Vars: map[string]interface{}{
			"name":          "test-ec2",
			"ami_id":        "ami-0dee22c13ea7a9a67",
			"instance_type": "t3.micro",
			"subnet_id":     subnetID,
			"sg_id":         sgID,
		},
	}
	defer terraform.Destroy(t, ec2Opts)
	terraform.InitAndApply(t, ec2Opts)

	instanceID := terraform.Output(t, ec2Opts, "instance_id")
	assert.NotEmpty(t, instanceID)
}

